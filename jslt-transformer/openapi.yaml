openapi: 3.0.3
info:
  title: JSLT Transformation Service API
  description: |
    A REST API service for performing JSON transformations using JSLT (JSON Structured Language Transform).
    
    This service provides endpoints to transform JSON data using JSLT queries, with support for:
    - Complex JSON transformations
    - Pretty-printed output formatting
    - Comprehensive error handling
    - Request tracking and monitoring
    
    ## Authentication
    Currently, the API is open for development. Production deployment will require API key authentication.
    
    ## Error Handling
    The API uses a consistent error response format:
    - HTTP 400: Validation errors (missing/invalid request fields)
    - HTTP 200 with success:false: Processing errors (invalid JSON/JSLT)
    - All responses include request tracking information
  version: 1.0.0
  contact:
    name: MXAI Development Team
    email: support@mxai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.mxai.com/jslt/v1
    description: Production server (future)

paths:
  /transform:
    post:
      summary: Transform JSON using JSLT query
      description: |
        Transforms input JSON data using a provided JSLT transformation query.
        
        The service supports complex JSLT transformations including:
        - Field mapping and renaming
        - Data type conversions
        - Conditional logic
        - Array and object manipulations
        - Mathematical operations
        
        ## Examples
        
        **Simple field mapping:**
        ```json
        {
          "jsonData": "{\"name\": \"John\", \"age\": 30}",
          "jsltQuery": "{\"fullName\": .name, \"years\": .age}",
          "prettyPrint": false
        }
        ```
        
        **Array transformation:**
        ```json
        {
          "jsonData": "{\"users\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Jane\", \"age\": 25}]}",
          "jsltQuery": "{\"adults\": [.users[] | select(.age >= 18) | {\"name\": .name}]}",
          "prettyPrint": true
        }
        ```
      operationId: transformJson
      tags:
        - Transformation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationRequest'
            examples:
              json_object_input:
                summary: JSON object input (recommended)
                value:
                  jsonData: {"name": "John", "age": 30}
                  jsltQuery: '{"fullName": .name, "years": .age}'
                  prettyPrint: false
                  returnAsString: false
              json_string_input:
                summary: JSON string input (legacy compatibility)
                value:
                  jsonData: '{"name": "John", "age": 30}'
                  jsltQuery: '{"fullName": .name, "years": .age}'
                  prettyPrint: false
                  returnAsString: false
              string_result_pretty:
                summary: String result with pretty printing
                value:
                  jsonData: {"name": "Alice", "address": {"city": "New York", "zip": "10001"}}
                  jsltQuery: '{"person": {"name": .name, "location": .address.city}}'
                  prettyPrint: true
                  returnAsString: true
              array_transformation:
                summary: Array processing with object result
                value:
                  jsonData: {"items": [{"id": 1, "name": "Item1"}, {"id": 2, "name": "Item2"}]}
                  jsltQuery: '{"names": [.items[].name]}'
                  prettyPrint: false
                  returnAsString: false
      responses:
        '200':
          description: Transformation completed (success or failure)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationResponse'
              examples:
                success_object_result:
                  summary: Successful transformation with object result (default)
                  value:
                    success: true
                    result: {"fullName": "John", "years": 30}
                    processingTimeMs: 15
                    requestId: "a3e39328-7458-49a9-baf9-b3565df671e6"
                    timestamp: "2025-08-06T15:12:34.611300Z"
                success_string_result:
                  summary: Successful transformation with string result
                  value:
                    success: true
                    result: "{\n  \"person\" : {\n    \"name\" : \"Alice\",\n    \"location\" : \"New York\"\n  }\n}"
                    processingTimeMs: 12
                    requestId: "b7f8c123-9d4e-5a6f-8c7b-1e2f3a4b5c6d"
                    timestamp: "2025-08-06T15:13:45.123456Z"
                invalid_json:
                  summary: Invalid JSON input
                  value:
                    success: false
                    errorMessage: "Failed to parse JSON data: Unexpected end-of-input: expected close marker for Object"
                    requestId: "ee9ae22d-5c9f-48f4-8c1a-a7b7e338c47e"
                    timestamp: "2025-08-06T15:14:43.479300Z"
                invalid_jslt:
                  summary: Invalid JSLT query
                  value:
                    success: false
                    errorMessage: "JSLT transformation failed: Parse error: Encountered \"+\" at line 1, column 31"
                    requestId: "eeca9c2b-bcb2-4793-9509-6d988b737d30"
                    timestamp: "2025-08-06T15:15:00.125621Z"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_field:
                  summary: Missing required field
                  value:
                    timestamp: "2025-08-06T15:15:16.201+00:00"
                    status: 400
                    error: "Bad Request"
                    path: "/api/v1/transform"
                empty_field:
                  summary: Empty required field
                  value:
                    timestamp: "2025-08-06T15:15:38.163+00:00"
                    status: 400
                    error: "Bad Request"
                    path: "/api/v1/transform"

  /health:
    get:
      summary: Health check endpoint
      description: Returns the current health status of the JSLT transformation service
      operationId: getHealth
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  summary: Service is up
                  value:
                    status: "UP"
                    timestamp: "2025-08-06T15:12:19.288+00:00"

  /version:
    get:
      summary: Get service version information
      description: Returns version and service identification information
      operationId: getVersion
      tags:
        - Information
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
              examples:
                version_info:
                  summary: Current version
                  value:
                    version: "1.0.0"
                    serviceName: "JSLT Transformation Service"

components:
  schemas:
    TransformationRequest:
      type: object
      required:
        - jsonData
        - jsltQuery
      properties:
        jsonData:
          oneOf:
            - type: object
              description: Input JSON data as a JSON object
              example: {"name": "John", "age": 30}
            - type: string
              description: Input JSON data as a JSON string
              example: '{"name": "John", "age": 30}'
              minLength: 1
          description: |
            The input JSON data to be transformed. Can be provided as either:
            - A JSON object (recommended for better usability)
            - A JSON string (for compatibility with string-based clients)
        jsltQuery:
          type: string
          description: The JSLT transformation query to apply to the input data
          example: '{"fullName": .name, "years": .age}'
          minLength: 1
        prettyPrint:
          type: boolean
          description: Whether to format the output JSON with indentation and line breaks (only applies when returnAsString is true)
          default: false
          example: false
        returnAsString:
          type: boolean
          description: |
            Controls the format of the transformation result:
            - false (default): Returns result as a JSON object for better usability
            - true: Returns result as a JSON string (legacy behavior)
          default: false
          example: false

    TransformationResponse:
      type: object
      required:
        - success
        - requestId
        - timestamp
      properties:
        success:
          type: boolean
          description: Whether the transformation was successful
          example: true
        result:
          oneOf:
            - type: object
              description: The transformed JSON data as a JSON object (when returnAsString is false)
              example: {"fullName": "John", "years": 30}
            - type: string
              description: The transformed JSON data as a JSON string (when returnAsString is true)
              example: '{"fullName": "John", "years": 30}'
          description: |
            The transformation result. Format depends on the returnAsString parameter:
            - JSON object (default): Better for programmatic consumption
            - JSON string: Formatted string output, respects prettyPrint setting
            - null: Present only on success, null on errors
          nullable: true
        errorMessage:
          type: string
          description: Error description (present only on failure)
          example: "JSLT transformation failed: Parse error at line 1"
          nullable: true
        processingTimeMs:
          type: integer
          format: int64
          description: Processing time in milliseconds (null on validation errors)
          example: 15
          nullable: true
        requestId:
          type: string
          format: uuid
          description: Unique identifier for request tracking
          example: "a3e39328-7458-49a9-baf9-b3565df671e6"
        timestamp:
          type: string
          format: date-time
          description: Response timestamp in ISO 8601 format
          example: "2025-08-06T15:12:34.611300Z"

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Health status of the service
          enum: [UP, DOWN, DEGRADED]
          example: "UP"
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
          example: "2025-08-06T15:12:19.288+00:00"

    VersionResponse:
      type: object
      required:
        - version
        - serviceName
      properties:
        version:
          type: string
          description: Current version of the service
          example: "1.0.0"
        serviceName:
          type: string
          description: Name of the service
          example: "JSLT Transformation Service"

    ErrorResponse:
      type: object
      required:
        - timestamp
        - status
        - error
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2025-08-06T15:15:16.201+00:00"
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type description
          example: "Bad Request"
        path:
          type: string
          description: Request path that caused the error
          example: "/api/v1/transform"

tags:
  - name: Transformation
    description: JSON transformation operations using JSLT
  - name: Monitoring
    description: Service health and monitoring endpoints
  - name: Information
    description: Service information and metadata

externalDocs:
  description: JSLT Language Documentation
  url: https://github.com/schibsted/jslt
